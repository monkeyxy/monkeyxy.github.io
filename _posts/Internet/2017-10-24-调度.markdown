---
title: 调度
date: '2017-12-10 13:00:00'
categories: [
Internet
]
layout: post
author: xy
---


### 什么是进程的调度？
    
上一篇进程和线程中提到的调度中，我们了解到，多个不同的进程，从诞生、运行、消灭多个状态之间相互转换，处理器如何协调多个任务的正常执行，这就需要进程调度程序按照一定的策略，动态地把处理器分配给处于就绪队列中的某个进程，使之执行。（个人理解，调度的几个关键词：<span style="font-weight:bold;color:#ac4142">上下文切换、协调</span>）

现在的操作系统为了协调多个进程能同时进行工作，最基本的手段就是进程定义优先级。如果多个进程同时处于可执行的状态，则看谁的优先级高就执行谁。那么进程的优先级是如何确定的？一是用户程序制定，二是内核的调度程序动态调整。

那么问题又来了，如果有多个相同优先级的实时进程都处于可执行的状态呢？这个时候该怎么办？
为此，有多种调度策略可供使用，接下来了解下有哪些常用的调度算法咯。

### 调度算法

* 1、FCFS(first come first served)

顾名思义，先来的先服务。哪个进程先发起服务就先处理哪个进程。有利于长进程不利于短进程。

* 2、SJF(shortest job first)

最短作业优先。是fcfs算法的改进，目的是为了减小平均周转时间。不利于长进程，长时间得不到处理。

* 3、优先权调度算法类型

<span style="font-weight:bold;color:#ac4142">非抢占式优先权算法：</span>系统一旦把处理机分配给就绪队列中优先权最高的进程后，该进程便一直执行下去，直至完成。

<span style="font-weight:bold;color:#ac4142">抢占式优先权算法：</span>系统把处理机分配给优先权最高的进程，如果在其执行期间，出现了另外一个优先权更高的进程，进程调度程序就立即停止当前进程（原优先权最高的进程）的执行，重新将处理机分配给更高执行权的进程。

显然，抢占式的调度算法能更好的满足紧迫作业的要求，故而常用于要求比较严格的实时系统中，以及对性能要求较高的批处理和分时系统中。

* 4、时间片轮转法

系统能在给定的时间内响应所有用户的进程请求。每个进程被分配一时间段，即该进程允许运行的时间

* 5、多级反馈队列

进程在进入待调度的队列等待时，首先进入优先级最高的q1等待，首先调度优先级高的队列中的进程。如果高优先级队列中已经没有调度的进程，则调度次优先级队列的进程。同个队列中的各个进程按照时间片轮转调度。
 










