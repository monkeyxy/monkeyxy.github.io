---
title: 聊天室的相关技术及实现
date: '2017-09-27 14:17:00'
categories: [
    work
]
layout: post
author: xy
---

### 序言

这一篇介绍如何实现聊天室。
首先看下正常的一次http请求是酱紫的。

![HTTP请求](/images/http1.png)

两个web客户端进行通信，如果按照普通的技术，就是用ajax请求到服务端询问另外一方的消息，不断进行处理，贼蛋疼的。。。撸主以前一直以为，如果connection为keep-alive设置为长连接，这样是否就能愉快的进行聊天？事实上并非如此~~
先来了解神马是http的长连接和短连接~

1、http的长连接和短连接

	http1.0规定浏览器与服务器只保持短连接，浏览器每次请求都需要和服务器建立一个TCP连接，服务器完成请求处理后立即断开TCP连接。每次连接只传输一个文档和图像，上下请求完全分离，客户端每次建立和关闭连接是一个费时的过程且影响客户机和服务器的性能。

	http1.1支持长连接，在一个tcp连接上可以传送多个http请求和响应，减少建立和关闭连接的消耗和延迟。http1.1允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照客户端请求先后顺序依次返回响应结果。http1.1的持续连接需要在connection请求头的值为keep-alive，客户端通知服务器返回本次请求结果后保持连接。connection为close，客户端通知服务器返回本次请求结果后关闭连接。http1.1还提供了与身份认证、状态管理和cache缓存等机制相关的请求头和响应头。

![HTTP1.1长连接图](/images/http1.1.jpg)

----
	设置connection为keep-alive，且要服务器和客户端都设置，算长连接。http1.1的长连接是指多次http请求（这些请求包括网页内容，css文件，js文件，图片等等），其实都是使用一个tcp连接，可以节省很多消耗。这里的长连接并不是永久连接，如果这个连接没有http请求发出的话，这个长连接就会断掉。（具体连接的长短，是可以在header中设置）


因此，connection为keep-alive并不能愉快的在聊天室聊天。那么用socket的话会怎样呢？

2、socket 、web socket、 sockert.io

----
	socket

	socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口(API)。

	Socket的出现只是使得程序员更方便地使用TCP/IP协议栈而已，是对TCP/IP协议的抽象，从而形成了我们知道的一些最基本的函数接口，比如create、listen、connect、accept、send、read和write等等。

	网络上的两个程序通过一个双向的通信连接实现数据的交换，这个连接的一端成为一个socket。类似电话网，任何用户在通话前，必须占有一部电话机，相当于申请一个Socket，同时要知道对方的号码，对方也需要有一个固定的Socket，当向对方拨号呼叫，相当于发出连接请求，双方正式通话相当于连接成功。双方通话的过程，是一方向电话机发出信号和对方从电话机接收信号的过程，相当于向Socket发送数据和从Socket接收数据。通话结束后，一方挂电话机相当于关闭Socket，撤销连接。

	socket起源于Unix，而Unix/LINux的哲学就是：“一切皆文件”，socket是一种特殊的文件，socket的一些函数就是对其进行读写打开关闭的操作。

![socket通信图](/images/socket.png)

----

	WebSocket
	http是无状态的连接协议，为了支持客户端与服务器之间的交互，就需要通过cookie和session来保持状态。
	Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说。主流的Web端即时通讯方案大致有4种：传统Ajax短轮询、Comet技术、WebSocket技术、SSE（Server-sent Events）。
	WebSocket是HTML5的一种新通信协议，它实现了浏览器与服务器之间的双向通讯。

-----

	Socket.IO
	Socket.IO是一个完全由JavaScript实现、基于Node.js、支持WebSocket的协议用于实时通信、跨平台的开源框架，它包括了客户端的JavaScript和服务器端的Node.js。
	Socket.IO是一个开源的WebSocket库，它通过Node.js实现WebSocket服务端，同时也提供客户端JS库。Socket.IO支持以事件为基础的实时双向通讯，它可以工作在任何平台、浏览器或移动设备。

	客户端向服务器端发起socket请求，on是为了监听服务器信息，emit是为了请求

	客户端的
	io.connect(url) //客户端连接上服务器端
	socket.on  //客户端监听服务器端事件
	socket.emit  //客户端向服务器端发送数据
	socket.disconnect() //客户端断开链接

	服务器端的
	socket.on
	socket.emit
	socket.broadcast
	......


-----

所以咯？

	用websocket实现聊天室和用http实现聊天室的区别
	1、websocket是http协议的补充。http需要客户端主动发起请求，服务器才能响应一次。websocket可以实现全双工即时通信，服务器可以主动给客户端推送消息。
	2、http是无状态的，对一个url请求是没有上下文关系。每个请求都是独立的，客户端需要通过增加cookie和session机制来设置状态。

### 聊天室的几大功能实现

项目中引入socket.io   
`<script src="https://cdn.bootcss.com/socket.io/1.7.4/socket.io.js"></script>`

io.connet('http://xxx')

socket.on //用户监听服务器端的事件

socket.emit //用于向服务器发送数据

	(1)、如何通信

![贴代码1](/images/code1.jpg)

![ws图1](/images/sendMsg1.png)

打开控制台，查看ws，绿色的为发送的数据，白色的为服务器返回的数据，2和3是ping-pong一下，看网络是否畅通。

	(2)、在线客户列表+主播成员列表（加群退群的即时更新）
	(3)、禁言+ 引用内容 + @某某 +屏蔽展示
	(4)、打赏等其他的广播通知		