---
title: angular--指令篇
date: '2018-03-30 10:00:00'
categories: [
angular
]
layout: post
author: xy
---

Angular的指令分三种

 1. 组件：用于构建ui组件
 2. 属性指令：用户改变组件的外观或行为
 3. 结构指令：用于动态删除或删除dom元素、改变dom布局

<h2 style="text-align:center;color:red">结构指令</h2>

NgClass:接收一个对象，key为class名，value为值，表示是否用改样式

```<p [ngClass]="{'fadeIn'}">example</p>```
```<p [ngClass]="{'fadeIn':!hidden}">example</p>```

NgStyle:设置dom元素的css属性，可以动态的

```<div [ngStyle]="{'color':'#999'}">写样式的东西咯</div>```
```<div [ngStyle]="{'color':gray?'#999':'#000'}">写样式的东西咯</div>```

NgFor:创建dom元素，类似ng1中的ng-repeat
```javascript
    const list = [ {name:'a'} ,{name:'b'}]
    const array = [1,2,3,4]
```
```html
<ul>
    <li *ngFor="let item of list">{{item.name}}</li>
</ul>
<ul>
    <li *ngFor="let item of array,let i = index">{{item}}第{{i}}个</li>
</ul>
```
NgIf:设置dom元素的展示或隐藏
```html
<div *ngIf="show">要不要展示咧？<div>
```


--------------

<h2 style="text-align:center;color:red">自定义属性指令</h2>

当内置指令还不能满足实际业务场景时，Angular中提供了自定义指令来满足特定的场景需求

```ng generate directive child-directive```

此时app.module中已增加ChildDirectiveDirective指令

```typescript
//...
@NgModule({
  imports: [ BrowserModule ],
  declarations: [
    AppComponent,
    ChildDirectiveDirective//!!申明我们定义的指令
  ],
  bootstrap: [ AppComponent ]
})
//...
```

<!-- 每个组件都有用output和input属性 -->

举个栗子：给用自定义属性的内容加点特殊处理

```typescript
import { Directive,ElementRef,Renderer2,Input } from '@angular/core';

@Directive({//@Directive装饰器指定了一个选择器名称，用于指出与此指令相关联的属性的名字
  selector: 'color,[color]'
})
export class ChildDirectiveDirective {
  @Input('color')color : any;//@Input 为组件提供数据
  private elem;
  constructor(private renderer:Renderer2,elementRef:ElementRef) { 
    this.elem = elementRef//elementRef可直接获取到dom
  }
  ngOnInit(){
    this.renderer.setStyle(this.elem.nativeElement,'color',this.color)//让页面上该dom渲染该样式
  }
}
```
组件中添加该指令,可自定义展示的样式

```<div [color]='"red"'>测试下咯</div>```

--------------
<h2 style="text-align:center;color:red">组件</h2>

是时候祭出我的超简单基础组件第一套！！！switch组件的实现

look look 组件实现的部分

1. 第一步，实现switch的开关操作

首先把switch轮子的样式写好

<img style="width: 40%" src="/images/angular/4.jpg">

```html
<span>
  <label class="iSwitch">
    <input type="checkbox" (click)="switch($event)" #switchInput >
    <i></i>
  </label> 
</span>
```
具体css样式怎么撸的我就不贴了，自行撸！下面主要讲组件的实现

```typescript
import { Component, OnInit, Output, EventEmitter, Input, ViewChild,ElementRef,Renderer2 } from '@angular/core';

@Component({
    selector:'switch',//selector就是使用该组件时候的标签名字
    templateUrl:'./switch.component.html',
    styleUrls:['./switch.component.scss']
})

export class SwitchComponent implements OnInit {
  public open:boolean;
  @ViewChild('switchInput' , {read: ElementRef}) switchInput: ElementRef;
  //ElementRef 直接获取了轮子中<input>dom元素
  @Output() onchange: EventEmitter<any> = new EventEmitter<any>();
  //前面提到@input，可以从demo子组件中获取数据，@output则相当于方法的绑定，将onchange方法绑定到demo中，在父作用域中处理事件。output一般都是一个EventEmitter实例，通过emit()方法将父组件取到的值返回给demo子组件中
  constructor(private renderer: Renderer2 ,) { }

  ngOnInit() {

  }
  switch(e){
    this.open = !this.open
    this.onchange.emit(this.switchInput.nativeElement.checked)//返回给子组件demo中
  }
}

```
使用轮子的代码，使用的方法：

```<switch (onchange)="getSwitchVaule($event)"></switch>```

```typescript
export class SwitchDemo {
  public getSwitchVaule(v){//页面中的onchange方法是父组件提供的
    console.log('结果：',v)
  }
  
}
```

看到这是否还会一脸懵逼？？？我们来解读下实现的过程。使用&lt;switch&gt;标签名，可以实例化一个switch组件，并且获取到父组件通过@Output提供的onchange方法，在这个方法中，&lt;switch&gt父组件处理switch开关的值，处理后的值，通过emit（）方法返还给demo组件中```public getSwitchVaule(v)```

接着我们就会思考switch组件是否可以添加一些默认值，进入页面默认就是打开的状态，也就是demo组件如何给父组件通信，告诉父组件我现在是打开的状态，这里可以借助添加属性的方法来实现

```<gf-switch (onchange)="getSwitchVaule($event)" [default]=true>```

[defalut]是一个自定义的属性，并且传值true，可在父组件轮子中去获取demo的传值

```typescript
//...
export class SwitchComponent implements OnInit {
  @Input('default') defaultData: any;//默认关闭状态
  constructor(...) { }
  ngOnInit(){
    this.initDefault();//设置一个获取初始默认值的函数
  }
  initDefault(){
    //this.defaultData 可获取到demo组件中传值过来的true
    if(this.defaultData){
      this.switchInput.nativeElement.checked = true;//设置页面switch的开关状态
      this.open = !this.open
    }
  }
} 
//...

```

现在switch组件已经可以支持点击打开或者关闭开关，并且可接收一个默认开关值。至于switch的禁用状态disabled也同理可实现，这个大家就自行思考啦~道理都是一样的啦~~~

咱们下篇component详细再聊啦~~~再贱！！！
![表情包2](/images/表情包/pic3.jpg)











