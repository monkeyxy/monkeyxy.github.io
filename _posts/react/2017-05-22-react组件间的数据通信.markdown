---
title: React的组件间的数据通信
date: '2017-05-22 17:00:00'
updateAt: '2017-5-24 13:00:00'
categories: [
front
]
layout: post
author: xy
---

### React的组件间的数据通信

*先来了解下props和state的概念以及区别*

props:是不可变的。是一种父级向子级传递数据的方式。

state:是可变的。state是react中组件的一个对象。根据不同的状态来重新渲染界面。in all，用户界面是通过state的变化而变化。

#### 一、组件之间的交流方式

1、<父组件>向<子组件>传值

父组件将子组件需要的props传给子组件，子组件通过this.props来使用----通常都是通过子组件的props用父组件的东西。

    class Parent React.Component({
        ...
        render(){
            return(
                <Children {this.props}/>
            )
        }
    }) 

    class Children React.Component({
        ...
        componentWillReceiveProps(nextProps){
            this.setState({
                something:nextProps.something,
                ...
            })
        }
        ...
    })

2、<子组件>向<父组件>传值

父组件用子组件的东西。可以把传递的内容通过设置ref，写在子组件上。父组件通过ref操作子组件的属性。

	class Parent React.Component({
        constructor(props){
            super(props);

            this._bind>apply(this,['changeRefreshState','parentFunc']);
        }
        _bind(...methods) {
            methods.forEach((method) => this[method] = this[method].bind(this));
        }
        changeRefreshState(event){
            this.setState({
                shouldRefresh:event,//是否需要刷新
            })
        }
        parentFunc(){
            this.refs.message.callAjax();//子组件去拉取数据
        }
        render(){
            return(
                <div>
                     <Children ref="message"  changeRefreshState= { this.changeRefreshState}/>
                     <button onClick={this.parentFunc}>子组件去拉取数据</button>
                </div>
            )
        }
    })
    export default Parent;

    class Children React.Componen({
        ...
        callAjax(){
            $.ajax({
                url:url,
                data:param
            })
                .done((data)=>{
                    this.props.changeRefreshState;//刷新
                })
                .fail(()=>{
                     //如果获取失败，这不刷新
                    this.props.changeRefreshState = false;
                })
        }
    })

3、没有任何关系的组件间的传值

目前react组件内部可能是个完整的应用，但是却无法让两个组件之间互相交流，使用对方的数据。有一种做法是，将两个组件之前使用相同的数据部分放在共有的父组件来管理，再通过props分发回组件。

几个问题：

*前面提到，react通过props父级向子级分发属性，state则是组件内部可以自行管理的状态。react没有数据向上回溯的能力。数据是单向流动的。*

*子组件改变父组件的state的方法只能通过onclick事件触发父组件声明好的回调*

*组件之间的嵌套关系复杂，业务中的逻辑太多，单纯通过props和state来完成大型应用的数据管理是远远不够的*

*组件之间的交流，如果把所有的state集中放在所有组件的顶层，再从顶层分发下来。为了更好的管理state，需要一个专业的库来管理，这时就很有必要引入Redux*




